{
  "version": 3,
  "sources": ["../../svelte-tiny-virtual-list/src/constants.js", "../../svelte-tiny-virtual-list/src/SizeAndPositionManager.js", "../../svelte-tiny-virtual-list/src/VirtualList.svelte"],
  "sourcesContent": ["export const ALIGNMENT = {\n\tAUTO:   'auto',\n\tSTART:  'start',\n\tCENTER: 'center',\n\tEND:    'end',\n};\n\nexport const DIRECTION = {\n\tHORIZONTAL: 'horizontal',\n\tVERTICAL:   'vertical',\n};\n\nexport const SCROLL_CHANGE_REASON = {\n\tOBSERVED:  0,\n\tREQUESTED: 1,\n};\n\nexport const SCROLL_PROP = {\n\t[DIRECTION.VERTICAL]:   'top',\n\t[DIRECTION.HORIZONTAL]: 'left',\n};\n\nexport const SCROLL_PROP_LEGACY = {\n\t[DIRECTION.VERTICAL]:   'scrollTop',\n\t[DIRECTION.HORIZONTAL]: 'scrollLeft',\n};\n", "/* Forked from react-virtualized ðŸ’– */\nimport { ALIGNMENT } from './constants';\n\n/**\n * @callback ItemSizeGetter\n * @param {number} index\n * @return {number}\n */\n\n/**\n * @typedef ItemSize\n * @type {number | number[] | ItemSizeGetter}\n */\n\n/**\n * @typedef SizeAndPosition\n * @type {object}\n * @property {number} size\n * @property {number} offset\n */\n\n/**\n * @typedef SizeAndPositionData\n * @type {Object.<number, SizeAndPosition>}\n */\n\n/**\n * @typedef Options\n * @type {object}\n * @property {number} itemCount\n * @property {ItemSize} itemSize\n * @property {number} estimatedItemSize\n */\n\nexport default class SizeAndPositionManager {\n\n\t/**\n\t * @param {Options} options\n\t */\n\tconstructor({ itemSize, itemCount, estimatedItemSize }) {\n\t\t/**\n\t\t * @private\n\t\t * @type {ItemSize}\n\t\t */\n\t\tthis.itemSize = itemSize;\n\n\t\t/**\n\t\t * @private\n\t\t * @type {number}\n\t\t */\n\t\tthis.itemCount = itemCount;\n\n\t\t/**\n\t\t * @private\n\t\t * @type {number}\n\t\t */\n\t\tthis.estimatedItemSize = estimatedItemSize;\n\n\t\t/**\n\t\t * Cache of size and position data for items, mapped by item index.\n\t\t *\n\t\t * @private\n\t\t * @type {SizeAndPositionData}\n\t\t */\n\t\tthis.itemSizeAndPositionData = {};\n\n\t\t/**\n\t\t * Measurements for items up to this index can be trusted; items afterward should be estimated.\n\t\t *\n\t\t * @private\n\t\t * @type {number}\n\t\t */\n\t\tthis.lastMeasuredIndex = -1;\n\n\t\tthis.checkForMismatchItemSizeAndItemCount();\n\n\t\tif (!this.justInTime) this.computeTotalSizeAndPositionData();\n\t}\n\n\tget justInTime() {\n\t\treturn typeof this.itemSize === 'function';\n\t}\n\n\t/**\n\t * @param {Options} options\n\t */\n\tupdateConfig({ itemSize, itemCount, estimatedItemSize }) {\n\t\tif (itemCount != null) {\n\t\t\tthis.itemCount = itemCount;\n\t\t}\n\n\t\tif (estimatedItemSize != null) {\n\t\t\tthis.estimatedItemSize = estimatedItemSize;\n\t\t}\n\n\t\tif (itemSize != null) {\n\t\t\tthis.itemSize = itemSize;\n\t\t}\n\n\t\tthis.checkForMismatchItemSizeAndItemCount();\n\n\t\tif (this.justInTime && this.totalSize != null) {\n\t\t\tthis.totalSize = undefined;\n\t\t} else {\n\t\t\tthis.computeTotalSizeAndPositionData();\n\t\t}\n\t}\n\n\tcheckForMismatchItemSizeAndItemCount() {\n\t\tif (Array.isArray(this.itemSize) && this.itemSize.length < this.itemCount) {\n\t\t\tthrow Error(\n\t\t\t\t`When itemSize is an array, itemSize.length can't be smaller than itemCount`,\n\t\t\t);\n\t\t}\n\t}\n\n\t/**\n\t * @param {number} index\n\t */\n\tgetSize(index) {\n\t\tconst { itemSize } = this;\n\n\t\tif (typeof itemSize === 'function') {\n\t\t\treturn itemSize(index);\n\t\t}\n\n\t\treturn Array.isArray(itemSize) ? itemSize[index] : itemSize;\n\t}\n\n\t/**\n\t * Compute the totalSize and itemSizeAndPositionData at the start,\n\t * only when itemSize is a number or an array.\n\t */\n\tcomputeTotalSizeAndPositionData() {\n\t\tlet totalSize = 0;\n\t\tfor (let i = 0; i < this.itemCount; i++) {\n\t\t\tconst size = this.getSize(i);\n\t\t\tconst offset = totalSize;\n\t\t\ttotalSize += size;\n\n\t\t\tthis.itemSizeAndPositionData[i] = {\n\t\t\t\toffset,\n\t\t\t\tsize,\n\t\t\t};\n\t\t}\n\n\t\tthis.totalSize = totalSize;\n\t}\n\n\tgetLastMeasuredIndex() {\n\t\treturn this.lastMeasuredIndex;\n\t}\n\n\n\t/**\n\t * This method returns the size and position for the item at the specified index.\n\t *\n\t * @param {number} index\n\t */\n\tgetSizeAndPositionForIndex(index) {\n\t\tif (index < 0 || index >= this.itemCount) {\n\t\t\tthrow Error(\n\t\t\t\t`Requested index ${index} is outside of range 0..${this.itemCount}`,\n\t\t\t);\n\t\t}\n\n\t\treturn this.justInTime\n\t\t\t? this.getJustInTimeSizeAndPositionForIndex(index)\n\t\t\t: this.itemSizeAndPositionData[index];\n\t}\n\n\t/**\n\t * This is used when itemSize is a function.\n\t * just-in-time calculates (or used cached values) for items leading up to the index.\n\t *\n\t * @param {number} index\n\t */\n\tgetJustInTimeSizeAndPositionForIndex(index) {\n\t\tif (index > this.lastMeasuredIndex) {\n\t\t\tconst lastMeasuredSizeAndPosition = this.getSizeAndPositionOfLastMeasuredItem();\n\t\t\tlet offset =\n\t\t\t\t    lastMeasuredSizeAndPosition.offset + lastMeasuredSizeAndPosition.size;\n\n\t\t\tfor (let i = this.lastMeasuredIndex + 1; i <= index; i++) {\n\t\t\t\tconst size = this.getSize(i);\n\n\t\t\t\tif (size == null || isNaN(size)) {\n\t\t\t\t\tthrow Error(`Invalid size returned for index ${i} of value ${size}`);\n\t\t\t\t}\n\n\t\t\t\tthis.itemSizeAndPositionData[i] = {\n\t\t\t\t\toffset,\n\t\t\t\t\tsize,\n\t\t\t\t};\n\n\t\t\t\toffset += size;\n\t\t\t}\n\n\t\t\tthis.lastMeasuredIndex = index;\n\t\t}\n\n\t\treturn this.itemSizeAndPositionData[index];\n\t}\n\n\tgetSizeAndPositionOfLastMeasuredItem() {\n\t\treturn this.lastMeasuredIndex >= 0\n\t\t\t? this.itemSizeAndPositionData[this.lastMeasuredIndex]\n\t\t\t: { offset: 0, size: 0 };\n\t}\n\n\t/**\n\t * Total size of all items being measured.\n\t *\n\t * @return {number}\n\t */\n\tgetTotalSize() {\n\t\t// Return the pre computed totalSize when itemSize is number or array.\n\t\tif (this.totalSize) return this.totalSize;\n\n\t\t/**\n\t\t * When itemSize is a function,\n\t\t * This value will be completedly estimated initially.\n\t\t * As items as measured the estimate will be updated.\n\t\t */\n\t\tconst lastMeasuredSizeAndPosition = this.getSizeAndPositionOfLastMeasuredItem();\n\n\t\treturn (\n\t\t\tlastMeasuredSizeAndPosition.offset +\n\t\t\tlastMeasuredSizeAndPosition.size +\n\t\t\t(this.itemCount - this.lastMeasuredIndex - 1) * this.estimatedItemSize\n\t\t);\n\t}\n\n\t/**\n\t * Determines a new offset that ensures a certain item is visible, given the alignment.\n\t *\n\t * @param {'auto' | 'start' | 'center' | 'end'} align Desired alignment within container\n\t * @param {number | undefined} containerSize Size (width or height) of the container viewport\n\t * @param {number | undefined} currentOffset\n\t * @param {number | undefined} targetIndex\n\t * @return {number} Offset to use to ensure the specified item is visible\n\t */\n\tgetUpdatedOffsetForIndex({ align = ALIGNMENT.START, containerSize, currentOffset, targetIndex }) {\n\t\tif (containerSize <= 0) {\n\t\t\treturn 0;\n\t\t}\n\n\t\tconst datum = this.getSizeAndPositionForIndex(targetIndex);\n\t\tconst maxOffset = datum.offset;\n\t\tconst minOffset = maxOffset - containerSize + datum.size;\n\n\t\tlet idealOffset;\n\n\t\tswitch (align) {\n\t\t\tcase ALIGNMENT.END:\n\t\t\t\tidealOffset = minOffset;\n\t\t\t\tbreak;\n\t\t\tcase ALIGNMENT.CENTER:\n\t\t\t\tidealOffset = maxOffset - (containerSize - datum.size) / 2;\n\t\t\t\tbreak;\n\t\t\tcase ALIGNMENT.START:\n\t\t\t\tidealOffset = maxOffset;\n\t\t\t\tbreak;\n\t\t\tdefault:\n\t\t\t\tidealOffset = Math.max(minOffset, Math.min(maxOffset, currentOffset));\n\t\t}\n\n\t\tconst totalSize = this.getTotalSize();\n\n\t\treturn Math.max(0, Math.min(totalSize - containerSize, idealOffset));\n\t}\n\n\t/**\n\t * @param {number} containerSize\n\t * @param {number} offset\n\t * @param {number} overscanCount\n\t * @return {{stop: number|undefined, start: number|undefined}}\n\t */\n\tgetVisibleRange({ containerSize = 0, offset, overscanCount }) {\n\t\tconst totalSize = this.getTotalSize();\n\n\t\tif (totalSize === 0) {\n\t\t\treturn {};\n\t\t}\n\n\t\tconst maxOffset = offset + containerSize;\n\t\tlet start = this.findNearestItem(offset);\n\n\t\tif (start === undefined) {\n\t\t\tthrow Error(`Invalid offset ${offset} specified`);\n\t\t}\n\n\t\tconst datum = this.getSizeAndPositionForIndex(start);\n\t\toffset = datum.offset + datum.size;\n\n\t\tlet stop = start;\n\n\t\twhile (offset < maxOffset && stop < this.itemCount - 1) {\n\t\t\tstop++;\n\t\t\toffset += this.getSizeAndPositionForIndex(stop).size;\n\t\t}\n\n\t\tif (overscanCount) {\n\t\t\tstart = Math.max(0, start - overscanCount);\n\t\t\tstop = Math.min(stop + overscanCount, this.itemCount - 1);\n\t\t}\n\n\t\treturn {\n\t\t\tstart,\n\t\t\tstop,\n\t\t};\n\t}\n\n\t/**\n\t * Clear all cached values for items after the specified index.\n\t * This method should be called for any item that has changed its size.\n\t * It will not immediately perform any calculations; they'll be performed the next time getSizeAndPositionForIndex() is called.\n\t *\n\t * @param {number} index\n\t */\n\tresetItem(index) {\n\t\tthis.lastMeasuredIndex = Math.min(this.lastMeasuredIndex, index - 1);\n\t}\n\n\t/**\n\t * Searches for the item (index) nearest the specified offset.\n\t *\n\t * If no exact match is found the next lowest item index will be returned.\n\t * This allows partially visible items (with offsets just before/above the fold) to be visible.\n\t *\n\t * @param {number} offset\n\t */\n\tfindNearestItem(offset) {\n\t\tif (isNaN(offset)) {\n\t\t\tthrow Error(`Invalid offset ${offset} specified`);\n\t\t}\n\n\t\t// Our search algorithms find the nearest match at or below the specified offset.\n\t\t// So make sure the offset is at least 0 or no match will be found.\n\t\toffset = Math.max(0, offset);\n\n\t\tconst lastMeasuredSizeAndPosition = this.getSizeAndPositionOfLastMeasuredItem();\n\t\tconst lastMeasuredIndex = Math.max(0, this.lastMeasuredIndex);\n\n\t\tif (lastMeasuredSizeAndPosition.offset >= offset) {\n\t\t\t// If we've already measured items within this range just use a binary search as it's faster.\n\t\t\treturn this.binarySearch({\n\t\t\t\thigh: lastMeasuredIndex,\n\t\t\t\tlow:  0,\n\t\t\t\toffset,\n\t\t\t});\n\t\t} else {\n\t\t\t// If we haven't yet measured this high, fallback to an exponential search with an inner binary search.\n\t\t\t// The exponential search avoids pre-computing sizes for the full set of items as a binary search would.\n\t\t\t// The overall complexity for this approach is O(log n).\n\t\t\treturn this.exponentialSearch({\n\t\t\t\tindex: lastMeasuredIndex,\n\t\t\t\toffset,\n\t\t\t});\n\t\t}\n\t}\n\n\t/**\n\t * @private\n\t * @param {number} low\n\t * @param {number} high\n\t * @param {number} offset\n\t */\n\tbinarySearch({ low, high, offset }) {\n\t\tlet middle = 0;\n\t\tlet currentOffset = 0;\n\n\t\twhile (low <= high) {\n\t\t\tmiddle = low + Math.floor((high - low) / 2);\n\t\t\tcurrentOffset = this.getSizeAndPositionForIndex(middle).offset;\n\n\t\t\tif (currentOffset === offset) {\n\t\t\t\treturn middle;\n\t\t\t} else if (currentOffset < offset) {\n\t\t\t\tlow = middle + 1;\n\t\t\t} else if (currentOffset > offset) {\n\t\t\t\thigh = middle - 1;\n\t\t\t}\n\t\t}\n\n\t\tif (low > 0) {\n\t\t\treturn low - 1;\n\t\t}\n\n\t\treturn 0;\n\t}\n\n\t/**\n\t * @private\n\t * @param {number} index\n\t * @param {number} offset\n\t */\n\texponentialSearch({ index, offset }) {\n\t\tlet interval = 1;\n\n\t\twhile (\n\t\t\tindex < this.itemCount &&\n\t\t\tthis.getSizeAndPositionForIndex(index).offset < offset\n\t\t\t) {\n\t\t\tindex += interval;\n\t\t\tinterval *= 2;\n\t\t}\n\n\t\treturn this.binarySearch({\n\t\t\thigh: Math.min(index, this.itemCount - 1),\n\t\t\tlow:  Math.floor(index / 2),\n\t\t\toffset,\n\t\t});\n\t}\n}", null],
  "mappings": "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",
  "names": ["ctx"]
}
